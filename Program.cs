using System;

// Разработка программ с самостоятельным выделением подзадач
// Требуется выделить подзадачи, реализовать их решения подпрограммами, а затем собрать из них программу для решения всей задачи
// Данные должны передаваться через параметры подпрограмм, глобальные переменные использовать не следует
// Проанализировать особые случаи (возможное отсутствие искомых элементов, неоднозначность ответа) и предусмотреть их обработку в программе
// A – заданный двумерный массив
// Если не оговорено другое, то количество столбцов отличается от количества строк
// Изменить двумерный массив A так, чтобы на первом месте стояла строка с максимальной,
// а на последнем месте строка с минимальной суммой элементов, сохранив все элементы исходного массива

namespace Homework_5._3
{
   internal class Program
   {
      static void Main(string[] args)
      {
         int[,] num =
         {
            { -71, -22, -70, 26, 74, 53, 43, -25, -44, -16, -80, 32, -92, 19, -97, -89, 34, -38, -37, 93 },
            { - 40 ,10 ,11 ,7 ,47 ,10 ,4 ,30 ,35 ,7 ,18 ,-46 ,64 ,43 ,-8 ,50 ,-80 ,-37 ,-87 ,-10 },
            {37 ,-36 ,-31 ,-56 ,-36 ,14 ,-17 ,4 ,-62 ,79 ,-15 ,64 ,-33 ,9 ,52 ,37 ,7 ,33 ,11 ,-60},
            {64 ,69 ,-20 ,-42 ,66 ,40 ,50 ,11 ,53 ,-77 ,81 ,60 ,-87 ,92 ,1 ,-36 ,32 ,72 ,18 ,-79},
            { - 62 ,-46 ,80 ,-30 ,24 ,8 ,-16 ,66 ,-70 ,-40 ,-35 ,58 ,86 ,12 ,-84 ,-6 ,11 ,87 ,29 ,39},
            {26 ,83 ,68 ,98 ,41 ,-73 ,-39 ,19 ,-97 ,-95 ,75 ,17 ,-49 ,-31 ,71 ,93 ,-16 ,77 ,48 ,81},
            {84 ,29 ,3 ,-34 ,-2 ,-92 ,-52 ,85 ,57 ,-98 ,-4 ,18 ,-87 ,-9 ,23 ,26 ,2 ,-37 ,-13 ,53},
            {64 ,-27 ,-29 ,-49 ,59 ,-91 ,7 ,40 ,-3 ,88 ,96 ,-70 ,-46 ,-70 ,28 ,5 ,-19 ,-49 ,20 ,32 },
            {77 ,69 ,-68 ,-63 ,29 ,28 ,18 ,-66 ,5 ,-57 ,-20 ,-54 ,88 ,32 ,-83 ,-42 ,-88 ,61 ,-53 ,-22},
            {86 ,-3 ,86 ,-13 ,-83 ,-48 ,-72 ,-23 ,33 ,42 ,38 ,84 ,94 ,30 ,5 ,-25 ,-27 ,-70 ,85 ,2},
            {94 ,-80 ,97 ,-59 ,-99 ,-73 ,9 ,47 ,-16 ,67 ,-66 ,-9 ,37 ,21 ,86 ,-66 ,-51 ,20 ,78 ,-21},
            {68 ,40 ,-98 ,-49 ,16 ,47 ,90 ,-24 ,78 ,-42 ,69 ,-7 ,-13 ,-57 ,84 ,-74 ,-3 ,-87 ,-50 ,-94},
            { 63 ,35 ,25 ,54 ,74 ,9 ,60 ,-94 ,-33 ,54 ,-84 ,-73 ,-78 ,39 ,-19 ,90 ,-11 ,32 ,-50 ,6},
            { - 89 ,69 ,89 ,-27 ,-4 ,-78 ,60 ,-67 ,15 ,71 ,81 ,-68 ,84 ,-93 ,-82 ,-82 ,-32 ,11 ,-68 ,65 },
            {21 ,7 ,32 ,-48 ,-66 ,-18 ,87 ,81 ,36 ,47 ,32 ,-71 ,5 ,-62 ,-52 ,-86 ,-62 ,31 ,78 ,74},
            {12 ,-85 ,25 ,24 ,-10 ,96 ,93 ,-99 ,-25 ,-15 ,94 ,38 ,39 ,-17 ,10 ,93 ,-97 ,-27 ,81 ,-14},
            { 73 ,22 ,20 ,85 ,85 ,-53 ,17 ,-42 ,67 ,82 ,-23 ,90 ,35 ,-33 ,-34 ,12 ,74 ,24 ,44 ,-50},
            {19 ,84 ,17 ,24 ,-68 ,57 ,72 ,-70 ,36 ,-69 ,38 ,-18 ,10 ,15 ,-14 ,-31 ,-37 ,-95 ,-37 ,-96},
            { 84 ,45 ,5 ,-87 ,78 ,-77 ,-48 ,32 ,-19 ,-16 ,25 ,15 ,43 ,-40 ,46 ,65 ,99 ,9 ,-26 ,-60},
            { - 35 ,-85 ,57 ,5 ,-60 ,-22 ,83 ,-16 ,78 ,92 ,33 ,90 ,-83 ,63 ,3 ,21 ,-79 ,72 ,21 ,0},
         };

         SwitchRows(num);

         Console.ReadKey();
      }

      private static void SwitchRows(int[,] array)
      {
         var iMax = array.GetLength(0);
         var jMax = array.GetLength(1);

         for (int i = 0; i < iMax; i = i + 2)
         {
            if (i + 1 == iMax)
            {
               break;
            }

            for (int j = 0; j < jMax; j++)
            {
               int a = array[i, j];
               array[i, j] = array[i + 1, j];
               array[i + 1, j] = a;
               Console.WriteLine();
            }
         }
      }

      void ChangeArray(int[,] array)
      {
         for (int i = 0; i < array.GetLength(0); i++)
         {
            for (int j = 0; j < array.GetLength(1); j++)
            {
               if (i > 0 && i < array.GetLength(1))
               {
                  int temporary = array[i, j];
                  array[i, j] = array[i, j];
                  array[i, j] = temporary;
               }
               else
               {
                  int temporary = array[i, j];
                  array[i, j] = array[(array.GetLength(1) - 1), j];
                  array[(array.GetLength(1) - 1), j] = temporary;
               }
            }
         }
      }

      public static int[] SortArray(int[] numArray)
      {
         int x = 0;
         int n = numArray.Length;
         int i = 0;
         while (i < n - 1)
         {
            int j = 0;
            while (j < n - 1 - i)
            {
               if (numArray[j] > numArray[j + 1])
               {
                  int tempVar = numArray[j];
                  numArray[j] = numArray[j + 1];
                  numArray[j + 1] = tempVar;
               }

               x++;
               j++;
            }

            i++;
         }

         Console.WriteLine(x);
         return numArray;
      }

      public static int[] SortOptimizedArray(int[] numArray)
      {
         int x = 0;
         int y = 0;
         int n = numArray.Length;
         int i = 0;
         while (i < n - 1)
         {
            bool swapRequired = false;
            int j = 0;
            while (j < n - 1 - i)
            {
               if (numArray[j] > numArray[j + 1])
               {
                  int tempVar = numArray[j];
                  numArray[j] = numArray[j + 1];
                  numArray[j + 1] = tempVar;
                  swapRequired = true;
               }

               x++;
               j++;
            }

            if (swapRequired == false)
            {
               y++;
               break;
            }

            i++;
         }

         Console.WriteLine(x + ", " + y);
         return numArray;
      }
   }
}